# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: deploy
on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  CLUSTER_NAME: k8s-cancentral-02-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    ############
    # GATEKEEPER
    ############

    # Run the Deployment fo GateKeeper
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f deploy/gatekeeper.yaml

    # Wait 5 seconds for the Operator to deploy
    - run: |
        sleep 5

    ###############
    # ALLOWEDREPOS
    ###############

    # Apply manifests for allowedrepos
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f allowedrepos/template.yaml

    # Wait 5 seconds for the constraint template to apply
    - run: |
        sleep 5

    # Apply manifests for allowedrepos
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f allowedrepos/constraint.yaml


    ###################
    # UNIQUEINGRESSHOST
    ###################

    # Apply manifests for uniqueingresshost
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f uniqueingresshost/sync.yaml

    # Wait 5 seconds for the constraint template to apply
    - run: |
        sleep 5

    # Apply manifests for uniqueingresshost
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f uniqueingresshost/template.yaml

    # Wait 5 seconds for the constraint template to apply
    - run: |
        sleep 5

    # Apply manifests for uniqueingresshost
    - name: kubectl
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f uniqueingresshost/constraint.yaml
