# This workflow will build a docker container, publish it to Azure Container Registry, and deploy it to Azure Kubernetes Service using a helm chart.
#
# https://github.com/Azure/actions-workflow-samples/tree/master/Kubernetes
#
# To configure this workflow:
#
# 1. Set up the following secrets in your workspace:
#     a. REGISTRY_USERNAME with ACR username
#     b. REGISTRY_PASSWORD with ACR Password
#     c. AZURE_CREDENTIALS with the output of `az ad sp create-for-rbac --sdk-auth`
#
# 2. Change the values for the REGISTRY_NAME, CLUSTER_NAME, CLUSTER_RESOURCE_GROUP and NAMESPACE environment variables (below).
name: deploy
on:
  push:
    branches:
      - master

# Environment variables available to all jobs and steps in this workflow
env:
  CLUSTER_NAME: k8s-cancentral-02-covid-aks
  CLUSTER_RESOURCE_GROUP: k8s-cancentral-01-covid-aks
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master

    #######################
    # CONSTRAINTS TEMPLATES
    #######################

    # Apply all of the constraint templates
    - name: constraint templates
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -k .

    # Wait 5 seconds for the constraint templates to apply
    - run: |
        sleep 5

    #############
    # CONSTRAINTS
    #############

    # Apply constraint for container-allowed-images
    - name: constraint for container-allowed-images
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f general/container-allowed-images/constraint.yaml

    # Apply constraint for container-limits
    # - name: constraint for container-limits
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f general/container-limits/constraint.yaml

    # Apply constraint for ingress-hostnames-conflict
    - name: constraint for ingress-hostnames-conflict
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f general/ingress-hostnames-conflict/constraint.yaml

    # Apply constraint for loadbalancer-no-public-ips
    - name: constraint for loadbalancer-no-public-ips
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f general/loadbalancer-no-public-ips/constraint.yaml

    # Apply constraint for allow-privilege-escalation
    - name: constraint for allow-privilege-escalation
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/allow-privilege-escalation/constraint.yaml

    # Apply constraint for apparmor
    # - name: constraint for apparmor
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f pod-security-policy/apparmor/constraint.yaml

    # Apply constraint for capabilities
    # - name: constraint for capabilities
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f pod-security-policy/capabilities/constraint.yaml

    # Apply constraint for flexvolume-drivers
    - name: constraint for flexvolume-drivers
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/flexvolume-drivers/constraint.yaml

    # Apply constraint for forbidden-sysctls
    - name: constraint for forbidden-sysctls
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/forbidden-sysctls/constraint.yaml

    # Apply constraint for fsgroup
    - name: constraint for fsgroup
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/fsgroup/constraint.yaml

    # Apply constraint for host-filesystem
    - name: constraint for host-filesystem
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/host-filesystem/constraint.yaml

    # Apply constraint for host-namespaces
    - name: constraint for host-namespaces
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/host-namespaces/constraint.yaml

    # Apply constraint for host-network-ports
    - name: constraint for host-network-ports
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/host-network-ports/constraint.yaml

    # Apply constraint for privileged-containers
    - name: constraint for privileged-containers
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/privileged-containers/constraint.yaml

    # Apply constraint for proc-mount
    - name: constraint for proc-mount
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/proc-mount/constraint.yaml

    # Apply constraint for read-only-root-filesystem
    - name: constraint for read-only-root-filesystem
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/read-only-root-filesystem/constraint.yaml

    # Apply constraint for seccomp
    # - name: constraint for seccomp
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f pod-security-policy/seccomp/constraint.yaml

    # Apply constraint for selinux
    # - name: constraint for selinux
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f pod-security-policy/selinux/constraint.yaml

    # Apply constraint for users
    # - name: constraint for users
    #   uses: statcan/actions/kubectl@master
    #   with:
    #     kubeconfig: ${{ secrets.KUBECONFIG }}
    #     args: apply -f pod-security-policy/users/constraint.yaml

    # Apply constraint for volumes
    - name: constraint for volumes
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f pod-security-policy/volumes/constraint.yaml

    # Apply constraint for peer-authentication
    - name: constraint for peer-authentication
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f service-mesh/peer-authentication/constraint.yaml

    # Apply constraint for port-naming
    - name: constraint for port-naming
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f service-mesh/port-naming/constraint.yaml

    # Apply constraint for traffic-policy
    - name: constraint for traffic-policy
      uses: statcan/actions/kubectl@master
      with:
        kubeconfig: ${{ secrets.KUBECONFIG }}
        args: apply -f service-mesh/traffic-policy/constraint.yaml
